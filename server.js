/** @format */

const express = require("express");
const app = express();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ê–ª–∏—Å—ã
app.post("/alice", (req, res) => {
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ê–ª–∏—Å—ã:", JSON.stringify(req.body, null, 2));

    const request = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if (!request || !request.request) {
      return res.json({
        response: {
          text: "–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ",
          end_session: true,
        },
        version: "1.0",
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (request.request.type === "SimpleUtterance") {
      const command = request.request.command.toLowerCase();

      if (command.includes("–≥—Ä–æ–º") || command.includes("–º–æ–ª–Ω–∏—è")) {
        return res.json({
          response: {
            text: "–ì—Ä–æ–º!",
            tts: '<speaker effect="thunder"> –ì—Ä—Ä—Ä–æ–º! </speaker>',
            end_session: true,
          },
          version: "1.0",
        });
      }

      if (command.includes("–ø–æ–º–æ—â—å") || command.includes("—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å")) {
        return res.json({
          response: {
            text: '–Ø –º–æ–≥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –≥—Ä–æ–º–∞. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ "–≥—Ä–æ–º" –∏–ª–∏ "–º–æ–ª–Ω–∏—è".',
            tts: "–Ø –º–æ–≥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –≥—Ä–æ–º–∞. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ –≥—Ä–æ–º –∏–ª–∏ –º–æ–ª–Ω–∏—è.",
            end_session: false,
          },
          version: "1.0",
        });
      }
    }

    // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if (
      request.request.type === "ButtonPressed" ||
      request.request.type === ""
    ) {
      return res.json({
        response: {
          text: '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–≤—ã–∫ "–ì—Ä–æ–º –∏ –ú–æ–ª–Ω–∏—è". –°–∫–∞–∂–∏—Ç–µ "–≥—Ä–æ–º" –¥–ª—è –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.',
          tts: "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–≤—ã–∫ –ì—Ä–æ–º –∏ –ú–æ–ª–Ω–∏—è. –°–∫–∞–∂–∏—Ç–µ –≥—Ä–æ–º –¥–ª—è –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.",
          end_session: false,
        },
        version: "1.0",
      });
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      response: {
        text: '–°–∫–∞–∂–∏—Ç–µ "–≥—Ä–æ–º" –¥–ª—è –∑–≤—É–∫–∞ –≥—Ä–æ–º–∞.',
        tts: "–°–∫–∞–∂–∏—Ç–µ –≥—Ä–æ–º –¥–ª—è –∑–≤—É–∫–∞ –≥—Ä–æ–º–∞.",
        end_session: false,
      },
      version: "1.0",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.json({
      response: {
        text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
        end_session: true,
      },
      version: "1.0",
    });
  }
});

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({ status: "OK", timestamp: new Date().toISOString() });
});

// –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
app.get("/", (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞–≤—ã–∫–∞ –ê–ª–∏—Å—ã "–ì—Ä–æ–º –∏ –ú–æ–ª–Ω–∏—è" —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use("*", (req, res) => {
  res.status(404).json({ error: "Endpoint not found" });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç Health check: http://localhost:${PORT}/health`);
});
